name: GitHub Actions CD
run-name: Deploy NextJS
on:
    workflow_dispatch:
    push:
        branches:
            - "main"
jobs:
    Push-To-Image-Repo:
        runs-on: ubuntu-latest
        env:
            IMAGE_NAME: hrm-fe
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Install doctl
              uses: digitalocean/action-doctl@v2
              with:
                  token: ${{ secrets.DO_TOKEN }}

            - name: Authen DO registry
              run: doctl registry login

            - name: Build docker image
              run: docker build . -t ${{ env.IMAGE_NAME }}:latest

            - name: Tag image with DO
              run: docker tag ${{ env.IMAGE_NAME }}:latest registry.digitalocean.com/capstone-registry/${{ env.IMAGE_NAME }}:latest

            - name: Push image to registry
              run: docker push registry.digitalocean.com/capstone-registry/${{ env.IMAGE_NAME }}:latest

            - name: Trigger garbage collection
              run: |
                doctl registry garbage-collection get-active -o json >info.json
                GB_UUID=$(jq -r '.[0].uuid' info.json 2>/dev/null || echo "")
                if [[ -z "$GB_UUID" ]]; then
                  echo "There is no garbage collection action currently running"
                else
                echo "There is a garbage collection action currently running, UUID: ${GB_UUID}. Cancel it now"
                  doctl registry garbage-collection cancel "${GB_UUID}"
                  sleep 15
                fi
                echo "Trigger a new garbage collection action"
                doctl registry garbage-collection start -f --include-untagged-manifests
      

    Trigger-Redeploy:
        needs: Push-To-Image-Repo
        runs-on: ubuntu-latest
        env:
            DROPLET_IP: 209.38.56.58
            SERVICE: nextjs
        steps:
            - name: Redeploy and clean up
              uses: appleboy/ssh-action@v1.1.0
              with:
                  host: ${{ env.DROPLET_IP }}
                  username: root
                  port: 22
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  script: |
                      cd app
                      docker compose pull ${{ env.SERVICE }}
                      docker compose -f docker-compose.yml up --build --force-recreate -d --no-deps ${{ env.SERVICE }}
                      docker image prune -f
